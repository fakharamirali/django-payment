# Generated by Django 4.2.5 on 2023-09-21 15:12

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import payment.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PayPortal",
            fields=[
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "code_name",
                    models.SlugField(
                        help_text="This name use to access from code and don't show user",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Code Name",
                    ),
                ),
                (
                    "backend",
                    models.CharField(
                        choices=[
                            (
                                "payment.payment_backends.nextpay.NextpayBackend",
                                "Nextpay",
                            )
                        ],
                        max_length=512,
                        verbose_name="Backend",
                    ),
                ),
                ("api_key", models.UUIDField(verbose_name="API Key")),
                (
                    "order_id_prefix",
                    models.SlugField(max_length=128, verbose_name="Order Prefix"),
                ),
                (
                    "default_currency",
                    models.CharField(
                        blank=True,
                        choices=[
                            (None, "Not set Default"),
                            ("IRR", "Rial"),
                            ("IRT", "Toman"),
                        ],
                        max_length=10,
                        null=True,
                        validators=[django.core.validators.RegexValidator("^\\w+$")],
                        verbose_name="Default Currency",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pay Portal",
                "verbose_name_plural": "Pay Portals",
                "permissions": [("secret", "Access secret data of pay portal")],
            },
            managers=[
                ("objects", payment.models.PayPortalManager()),
            ],
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "transaction_id",
                    models.UUIDField(null=True, verbose_name="Transaction ID"),
                ),
                (
                    "id",
                    models.BigAutoField(
                        primary_key=True, serialize=False, verbose_name="Order ID"
                    ),
                ),
                (
                    "linked_content_id",
                    models.PositiveBigIntegerField(
                        blank=True, null=True, verbose_name="Linked Object Id"
                    ),
                ),
                (
                    "amount",
                    models.PositiveBigIntegerField(
                        validators=[django.core.validators.StepValueValidator(1000)],
                        verbose_name="Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            (None, "Not set Default"),
                            ("IRR", "Rial"),
                            ("IRT", "Toman"),
                        ],
                        max_length=10,
                        validators=[django.core.validators.RegexValidator("^\\w$")],
                        verbose_name="Currency",
                    ),
                ),
                (
                    "card_holder",
                    models.CharField(
                        max_length=19,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[\\d*]{4}(?:-[\\d*]{4}){3}$"
                            )
                        ],
                        verbose_name="Card Number",
                    ),
                ),
                (
                    "shaparak_tracking_code",
                    models.CharField(
                        max_length=12,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+$", "This field only include number", "not_number"
                            )
                        ],
                        verbose_name="Tracking Code",
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[
                            (-3, "Refund failed by lack of funds"),
                            (-2, "Refund Failed"),
                            (-1, "Refunded"),
                            (0, "Successful"),
                            (1, "Wait ..."),
                            (2, "Canceled"),
                            (3, "Wait for Bank"),
                            (4, "Canceled By User"),
                            (5, "Failed"),
                            (6, "Api Key is invalid"),
                        ],
                        verbose_name="Status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "other",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Other Information"
                    ),
                ),
                (
                    "create_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Create Date"),
                ),
                (
                    "create_transaction_at",
                    models.DateTimeField(null=True, verbose_name="Create on portal at"),
                ),
                (
                    "last_verify",
                    models.DateTimeField(null=True, verbose_name="Last verify"),
                ),
                (
                    "last_edit",
                    models.DateTimeField(auto_now=True, verbose_name="Last Edit"),
                ),
                (
                    "linked_contenttype",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                        verbose_name="Linked Model",
                    ),
                ),
                (
                    "portal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="payment.payportal",
                        verbose_name="Pay Portal",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="transactions",
                        related_query_name="transactions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transaction",
                "verbose_name_plural": "Transactions",
                "default_permissions": [
                    ("create", "Can Create a new Transaction"),
                    ("verify", "Can verify a transaction with check"),
                    ("force_pay", "Can set it paid without check"),
                    ("delete_finished", "Delete finished transactions"),
                    ("delete_force_all", "Delete transactions"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="transaction",
            constraint=models.UniqueConstraint(
                condition=models.Q(("transaction_id__isnull", False)),
                fields=("transaction_id",),
                name="transaction_unique",
            ),
        ),
    ]
